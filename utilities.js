// Translations and configurations
const translations = {
    en: {
        pageTitle: "Gaigle - AI-Powered Search",
        searchPlaceholder: "Search with Gaigle...",
        aboutLink: "About",
        settingsLink: "Settings",
        loadingText: "Searching with AI...",
        quickAnswer: "Quick Answer",
        noResults: "No results found. Try a different search.",
        errorMessage: "An error occurred while searching. Please try again.",
        networkError: "Network error. Please check your internet connection.",
        apiError: "API server error. Please try again later.",
        apiTimeout: "The server is taking too long to respond",
        invalidRequest: "Invalid search request",
        serverError: "Server is currently unavailable",
        rateLimitExceeded: "Too many requests. Please wait before trying again.",
        switchToRussian: "Русский",
        switchToEnglish: "English",
        loadMore: "More",
        makeLonger: "Make longer",
        customPrompt: "Ask follow-up...",
        rateLimitWarning: "Too many requests! Please wait 15 seconds before searching again.",
        rateLimitSlowdown: "Too many requests! You can now make 1 request every 3 seconds.",
        disclaimer: "This site is not affiliated with or produced by Google Corporation. All answers are generated by AI and may not be 100% accurate."
    },
    ru: {
        pageTitle: "Gaigle - Поиск с ИИ",
        searchPlaceholder: "Поиск с помощью Gaigle...",
        aboutLink: "О сервисе",
        settingsLink: "Настройки",
        loadingText: "Ищем с помощью ИИ...",
        quickAnswer: "Быстрый ответ",
        noResults: "Ничего не найдено. Попробуйте другой запрос.",
        errorMessage: "Произошла ошибка при поиске. Пожалуйста, попробуйте ещё раз.",
        networkError: "Ошибка сети. Пожалуйста, проверьте интернет-соединение.",
        apiError: "Ошибка сервера API. Пожалуйста, попробуйте позже.",
        apiTimeout: "Сервер слишком долго отвечает",
        invalidRequest: "Некорректный поисковый запрос",
        serverError: "Сервер временно недоступен",
        rateLimitExceeded: "Слишком много запросов. Пожалуйста, подождите перед повторной попыткой.",
        switchToRussian: "Русский",
        switchToEnglish: "English",
        loadMore: "Ещё",
        makeLonger: "Длиннее",
        customPrompt: "Уточняющий вопрос...",
        rateLimitWarning: "Слишком много запросов! Пожалуйста, подождите 15 секунд перед новым поиском.",
        rateLimitSlowdown: "Слишком много запросов! Теперь вы можете делать 1 запрос каждые 3 секунды.",
        disclaimer: "Данный сайт никак не связан с корпорацией Google, и не производится ей. Все ответы делаются нейросетью и не могут быть верны на 100%."
    }
};

// Countries where Russian should be default
const russianSpeakingCountries = ['RU', 'BY', 'UA', 'KZ'];

// Rate limiting configuration
const RATE_LIMIT_CONFIG = {
    maxRequests: 5,
    timeWindow: 10, // seconds
    slowdownAfter: 10,
    slowdownDelay: 3, // seconds between requests
    banAfter: 15,
    banDuration: 15 // seconds
};

// API configuration
const API_CONFIG = {
    endpoints: [
        'https://api.onlysq.ru/ai/v2',
        'https://backup-api.onlysq.ru/ai/v2'
    ],
    timeout: 10000, // 10 seconds
    retries: 2
};

// Global state
let appState = {
    requestCount: 0,
    lastRequestTime: 0,
    rateLimitActive: false,
    rateLimitSlowdown: false,
    currentQuery: '',
    currentFastAnswer: '',
    activeRequests: 0
};

// Cookie functions
function setCookie(name, value, days) {
    let expires = "";
    if (days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax";
}

function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}

// Language functions
function initLanguage() {
    const langCookie = getCookie('lang');
    
    if (langCookie && (langCookie === 'en' || langCookie === 'ru')) {
        setLanguage(langCookie);
    } else {
        detectLanguageByIP();
    }
}

function detectLanguageByIP() {
    fetch('https://ipapi.co/json/')
        .then(response => response.json())
        .then(data => {
            const countryCode = data.country;
            const defaultLang = russianSpeakingCountries.includes(countryCode) ? 'ru' : 'en';
            setLanguage(defaultLang);
            setCookie('lang', defaultLang, 3);
        })
        .catch(() => {
            setLanguage('en');
            setCookie('lang', 'en', 3);
        });
}

function setLanguage(lang) {
    if (!translations[lang]) lang = 'en';
    
    // Update UI elements
    const elementsToUpdate = {
        'page-title': translations[lang].pageTitle,
        'search-input': translations[lang].searchPlaceholder,
        'about-link': translations[lang].aboutLink,
        'settings-link': translations[lang].settingsLink,
        'loading-text': translations[lang].loadingText,
        'load-more-button': translations[lang].loadMore,
        'disclaimer': translations[lang].disclaimer
    };

    for (const [id, text] of Object.entries(elementsToUpdate)) {
        const element = document.getElementById(id);
        if (element) element.textContent = text;
    }

    // Update language switcher
    const languageSwitcher = document.getElementById('language-switcher');
    if (languageSwitcher) {
        languageSwitcher.innerHTML = lang === 'en' 
            ? `<button onclick="switchLanguage('ru')">${translations.en.switchToRussian}</button>`
            : `<button onclick="switchLanguage('en')">${translations.ru.switchToEnglish}</button>`;
    }
}

// Markdown formatting functions
function formatTextWithMarkdown(text) {
    if (!text) return text;
    
    // Process headings
    text = text.replace(/^# (.*$)/gm, '<h1>$1</h1>');
    text = text.replace(/^## (.*$)/gm, '<h2>$1</h2>');
    text = text.replace(/^### (.*$)/gm, '<h3>$1</h3>');
    
    // Process bold and italic
    text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
    text = text.replace(/\_\_(.*?)\_\_/g, '<strong>$1</strong>');
    text = text.replace(/\_(.*?)\_/g, '<em>$1</em>');
    
    // Process line breaks
    text = text.replace(/\n/g, '<br>');
    
    // Process links
    text = text.replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank">$1</a>');
    
    return text;
}

// Safe HTML rendering
function safeFormatText(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return formatTextWithMarkdown(div.innerHTML);
}

// Error handling
function handleApiError(error) {
    console.error('API Error:', error);
    const lang = getCookie('lang') || 'en';
    
    if (error.name === 'AbortError') {
        return translations[lang].apiTimeout;
    } else if (error.message.includes('NetworkError')) {
        return translations[lang].networkError;
    } else if (error.message.includes('400')) {
        return translations[lang].invalidRequest;
    } else if (error.message.includes('50')) {
        return translations[lang].serverError;
    } else if (error.message.includes('rate limit')) {
        return translations[lang].rateLimitExceeded;
    }
    
    return translations[lang].errorMessage;
}

function showError(message) {
    const errorContainer = document.getElementById('error-container');
    if (errorContainer) {
        errorContainer.textContent = message;
        errorContainer.style.display = 'block';
    }
}

function hideError() {
    const errorContainer = document.getElementById('error-container');
    if (errorContainer) {
        errorContainer.style.display = 'none';
    }
}

// Global function to switch language
function switchLanguage(lang) {
    if (translations[lang]) {
        setCookie('lang', lang, 3);
        window.location.reload();
    }
}
